{"name":"Openui5-with-odataservice","tagline":"How to integrate OdataService in OpenUI5","body":"OpenUI5とODataを使ってWebアプリケーションを作る\r\n=========================\r\nOpenUI5とOdataServiceをWebアプリケーションとしてどのように統合すればよいか。\r\n\r\nHow to integrate OdataService in OpenUI5\r\n\r\n![OpenUI5withOData](docs/img/1.png)\r\n\r\n# <a name=\"table\">目次</a>\r\n\r\n1. [はじめに](#intro)\r\n1. [なぜODataが注目されるべきなのか？](#whatisOdata)\r\n1. [ODataの基本](#basic)\r\n1. [ODataServiceをURLで操作する](#manipulating)\r\n1. [OpenUI5とODataServiceの統合](#openui5withodata)\r\n\t- 5.1. [導入・準備](#install)  \r\n\t- 5.2. [プロジェクトの説明](#project)\r\n\t- 5.3. [商品リストの実装](#productlist_impl)\r\n\t\t* 5.3.a [商品リストの取得](#productlist)  \r\n\t\t* 5.3.b [商品名での検索](#search)  \r\n\t\t* 5.3.c [商品リストのソート、フィルタ](#sortandfilter)  \r\n\t- 5.4. [商品詳細の実装](#product_impl)\r\n\t\t* 5.4.a [商品情報の参照](#product)\r\n\t\t* 5.4.b [カテゴリー情報とメーカー情報の参照](#category)  \r\n1. [まとめ](#summary)  \r\n\r\n# <a name=\"intro\">1. はじめに</a>\r\n\r\nこのチュートリアルはOpenUI5とODataServiceを利用したWebアプリケーションを構築する上で、ODataをOpenUI5内でどのように扱えば良いかを中心に行います。  \r\n\r\n特にODataが持つURLパラメータを組み合わせによる柔軟なデータアクセス方法と、OpenUI5というUIフレームワークを組み合わせた場合に実現できる、データアクセスからUIへのフィードバックがシームレスに統合され隠蔽された、これからの企業向けWebアプリケーション開発における「OpenUI5＋ODataService」という新しい可能性（選択肢）を感じてもらえればと思います。\r\n\r\nOpenUI5のサポートが「V2」までであるため、ODataのバージョンは「2」を前提に説明します。\r\n\r\n\r\n<a name=\"whatisodata\">2. なぜODataが注目されるべきなのか？</a>\r\n========\r\n\r\nまず、なぜ今ODataが注目されるべきなのか、OpenUI5というUIフレームワークとODataが統合された時、何かメリットなのか少し背景など話しながら理解していきましょう。\r\n\r\n### ODataとは何か？\r\n\r\n<http://www.odata.org/> - Odata公式より。\r\n\r\n> OData is a standardized protocol for creating and consuming data APIs. OData builds on core protocols like HTTP and commonly accepted methodologies like REST. The result is a uniform way to expose full-featured data APIs.  \r\n\r\n> ODataとはデータAPIを作成し利用するために標準化されたプロトコルです。ODataはHTTPプロトコルと、一般的に浸透しているRESTという方法論で構成されています。つまり、これらのフル機能を満たすDataAPIを公開するために統一された方法です。\r\n\r\nつまり、\r\n\r\n「Webシステムにおける、フロントエンドとバックエンドとの面倒なAjax問い合わせの手続きを標準化したプロトコル」\r\n\r\nプロトコルと言われてますが難しく捉える必要はありません。  \r\nまったく新しい概念ではなく、既存のよくあるAjax上のやり取りを仕様化したものだと思っていただいて結構です。\r\n\r\n旧来から、システムをいくつかのレイアー構造で分割し、レイアーをまたがる部分を抽象化、標準化する動きはよく見られました。  \r\n代表的なものでは、アプリケーションからRDBMSへのデータアクセスの方法を標準化したODBCが存在します。  \r\n「OData」は、フロントエンドからバックエンドへのデータアクセスを標準化した、いわばODBCのWeb版です。ODataはMicrosoft、IBM、SAP、Citrix社が中心となりデータアクセスプロトコルの業界標準となるよう動いています。 \r\n\r\nODataに関する情報はこちらが公式サイトはこちらです。  \r\n<http://www.odata.org/>\r\n\r\n### 昨今のWeb開発の流れ\r\n\r\n昨今、Ajaxの登場によりWebアプリケーションにおいて、フロントエンドの重要性が増してきていることは周知の事実かと思います。  \r\nそれに伴ってフロントエンドの実装が高度化、複雑化してきたこともあり、ソリューションの1つとして様々なクライアントMVCフレームワーク（以下、クライアントMVC）が台頭してきました。\r\n\r\n現在は、いくつかのクライアントMVCを中心とするフロントエンド開発のエコシステムができつつあり、今後の企業向けWebシステムにて普及・活用していくためには、もう一歩踏み込んだ、バックエンドのWebAPIとの間のベストプラクティスの蓄積と標準化、そして統合ソリューションが必要だと感じています。  \r\n\r\n### データアクセス方法を標準化するODataの登場\r\n\r\nODataは、企業向けWebアプリケーションをターゲットに様々なデータアクセス方法を標準化しています。今後の企業向けWebアプリケーションの構築にて、様々なデータアクセスに対する柔軟に対応でき、現時点で非常に可能性を感じる仕様です。\r\n\r\nでは、実際に今までのクライアントMVCを利用した場合と比較して、ODataを利用した場合、どの辺りにメリットを感じるか話します。\r\n\r\nまず、今までのクライアントMVCを利用した場合のアプリケーション構築イメージです。\r\n![ODataを利用しない場合](docs/img/2-1.png)\r\n\r\nODataを使わない場合、フロントエンドを構築する一部にクライアントMVCが導入され、クライアントMVCを中心に統合されている状態でした。しかし、バックエンドとのWebAPIの設計、実装についてはそれぞれの案件ごとに対応している状況で、バックエンドも含めた形の統合とはほど遠い姿でした。\r\n\r\nではODataを利用した場合はどうでしょうか？\r\n![ODataを利用する場合](docs/img/2-2.png)\r\n\r\nODataを利用する場合、バックエンドがカスタムのWebAPIからOdataServiceと呼ばれるものに置き換わり、フロントエンドとバックエンドのデータアクセスについて標準化とライブラリによる隠蔽が可能です。  \r\n（ちなみに、JavascriptにてODataを利用する場合、デファクトなJavascriptライブラリは[datajs](http://datajs.codeplex.com/)です。）  \r\nしかし、ODataに対するURLパラメータの設定や、ODataから受け取ったデータのUIへのレンダリングは実装する必要があり、ODataのメリットより仕様の複雑さの方が目立つ状況でした。\r\nこのような状況のためか、ODataに対する世間の注目度はいまいちだったような気がします。\r\n\r\n### UIプレームワークとODataの統合\r\n\r\nそこで登場したものがODataをサポートするUIフレームの登場です。  \r\nここでのUIフレームワークとは、従来のクライアントMVCの機能を持ち、UIコンポーネントも持つものです。  \r\n特徴としては、WebAPIから取得したデータを元に自動でUIを構築し、UI側の操作をダイレクトにバックエンドに連携できる機能を持っています。  \r\nODataをサポートする代表的なUIフレームワークとしてOpenUI5があります。\r\n\r\nOpenUI5とODataを組み合わせた場合は次のようになります。\r\n![ODataとOpenUi5利用する場合](docs/img/2-3.png)\r\n\r\nODataとOpenUI5を組み合わせることで、バックエンドのデータアクセス部分からUIの変更まで隠蔽することが可能となりました。  \r\nアプリケーション開発者は面倒なバックエンドとの同期について頭を悩ませる事なく、ビジネスロジックの構築に専念できます。\r\n\r\nこのようにバックエンドとフロントエンドを統合した形は、企業向けWebアプリケーション構築のソリューションとして可能性を感じます。  \r\nOpenUI5というパートナーを得たことで、ODataの仕様は本当の意味で「使える」ものになりました。\r\n\r\n**[[⬆]](#table)**\r\n\r\n<a name=\"basic\">3. ODataの基本</a>\r\n========\r\n\r\nODataはHTTPをベースに構成されているため、1つのバックエンドとのやり取りを見る限る通常のHTTPとなんら変わりはありません。  \r\nバックエンドへの問い合わせは通常の`GET`、`POST`、`PUT`、`DELETE`で行い、返されるデータも`xml`、 `json`、`atom`形式です。\r\n\r\nしかし、ODataはバックエンドとの間の複数のHTTP問い合わせを統合して標準化しています。そしてODataを返すバックエンドがODataServiceと呼ばれるものです。  \r\nODataServiceは、内部に「インターフェース層」「実体化層」「抽象化層」の3つで構成されています。フロントエンドがODataServiceにアクセスする際は、ODataのデータモデルを提供する「Metadata」か、実際のデータAPIインターフェース「EntityConteiner」のどちらかを呼び出します。\r\n\r\nこちらが、ODataServiceについての概念図です。  \r\n![ODataService概念図](docs/img/3-1.png)\r\n（上の内容については、筆者の独自の解釈が含まれています。誤りがある可能性があります。）\r\n\r\nODataを理解する上では、特にデータモデルの構造を理解する事が重要です。まずMetadataを見ながらのODataのデータモデルについて基本的なことを理解しましょう。\r\n\r\n今回のチュートリアルで利用するNorthwindのMetadataをベースに進めていきます。Metadataはこちらで確認できます。  \r\n\r\n<http://services.odata.org/V2/Northwind/Northwind.svc/$metadata>\r\n\r\n## EntityTypeとEntities\r\n\r\n### EntityType\r\n\r\nEntityTypeはODataを構成する最も小さなデータ構造体です。Northwindの`Category`と`Product`のEntityTypeを見てみます。\r\n\r\n*Category*\r\n````xml\r\n<EntityType Name=\"Category\">\r\n\t<Key>\r\n\t\t<PropertyRef Name=\"CategoryID\"/>\r\n\t</Key>\r\n\t<Property xmlns:p8=\"http://schemas.microsoft.com/ado/2009/02/edm/annotation\" Name=\"CategoryID\" Type=\"Edm.Int32\" Nullable=\"false\" p8:StoreGeneratedPattern=\"Identity\"/>\r\n\t<Property Name=\"CategoryName\" Type=\"Edm.String\" Nullable=\"false\" MaxLength=\"15\" Unicode=\"true\" FixedLength=\"false\"/>\r\n\t<Property Name=\"Description\" Type=\"Edm.String\" Nullable=\"true\" MaxLength=\"Max\" Unicode=\"true\" FixedLength=\"false\"/>\r\n\t<Property Name=\"Picture\" Type=\"Edm.Binary\" Nullable=\"true\" MaxLength=\"Max\" FixedLength=\"false\"/>\r\n\t<NavigationProperty Name=\"Products\" Relationship=\"NorthwindModel.FK_Products_Categories\" FromRole=\"Categories\" ToRole=\"Products\"/>\r\n</EntityType>\r\n````\r\n\r\n*Product*\r\n````xml\r\n<EntityType Name=\"Product\">\r\n\t<Key>\r\n\t\t<PropertyRef Name=\"ProductID\"/>\r\n\t</Key>\r\n\t<Property xmlns:p8=\"http://schemas.microsoft.com/ado/2009/02/edm/annotation\" Name=\"ProductID\" Type=\"Edm.Int32\" Nullable=\"false\" p8:StoreGeneratedPattern=\"Identity\"/>\r\n\t<Property Name=\"ProductName\" Type=\"Edm.String\" Nullable=\"false\" MaxLength=\"40\" Unicode=\"true\" FixedLength=\"false\"/>\r\n\t<Property Name=\"SupplierID\" Type=\"Edm.Int32\" Nullable=\"true\"/>\r\n\t<Property Name=\"CategoryID\" Type=\"Edm.Int32\" Nullable=\"true\"/>\r\n\t<Property Name=\"QuantityPerUnit\" Type=\"Edm.String\" Nullable=\"true\" MaxLength=\"20\" Unicode=\"true\" FixedLength=\"false\"/>\r\n\t<Property Name=\"UnitPrice\" Type=\"Edm.Decimal\" Nullable=\"true\" Precision=\"19\" Scale=\"4\"/>\r\n\t<Property Name=\"UnitsInStock\" Type=\"Edm.Int16\" Nullable=\"true\"/>\r\n\t<Property Name=\"UnitsOnOrder\" Type=\"Edm.Int16\" Nullable=\"true\"/>\r\n\t<Property Name=\"ReorderLevel\" Type=\"Edm.Int16\" Nullable=\"true\"/>\r\n\t<Property Name=\"Discontinued\" Type=\"Edm.Boolean\" Nullable=\"false\"/>\r\n\t<NavigationProperty Name=\"Category\" Relationship=\"NorthwindModel.FK_Products_Categories\" FromRole=\"Products\" ToRole=\"Categories\"/>\r\n\t<NavigationProperty Name=\"Order_Details\" Relationship=\"NorthwindModel.FK_Order_Details_Products\" FromRole=\"Products\" ToRole=\"Order_Details\"/>\r\n\t<NavigationProperty Name=\"Supplier\" Relationship=\"NorthwindModel.FK_Products_Suppliers\" FromRole=\"Products\" ToRole=\"Suppliers\"/>\r\n</EntityType>\r\n````\r\n`EntityType`の中に`key`と`Property`が存在するような、良く見るデータ構造体です。  \r\n`NavigationProperty`はこのEntityTypeが他のEntityTypeと関連がある場合の情報で、RDBMSの外部キーのようなものです。後述する`Association`とセットで利用されます。\r\n\r\n### Entities\r\n\r\nEntitiesはEntityTypeのデータ構造体を実際のデータにしたものです。 \r\nJavaで置き換えるとクラスがEntityTypeで、Entitiesはそのインスタンスに該当します。そのため、Entitiesはリストになるケースが多いです。\r\n以下が、`Product`のEntitiesの抜粋です。  \r\n<http://services.odata.org/V2/Northwind/Northwind.svc/Products?$format=json>\r\n\r\n````javascript\r\n{\r\n\t\"d\": {\r\n\t\t\"results\": [{\r\n\t\t\t\t\"__metadata\": {\r\n\t\t\t\t\t\"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)\",\r\n\t\t\t\t\t\"type\": \"NorthwindModel.Product\"\r\n\t\t\t\t},\r\n\t\t\t\t\"ProductID\": 1,\r\n\t\t\t\t\"ProductName\": \"Chai\",\r\n\t\t\t\t\"SupplierID\": 1,\r\n\t\t\t\t\"CategoryID\": 1,\r\n\t\t\t\t\"QuantityPerUnit\": \"10 boxes x 20 bags\",\r\n\t\t\t\t\"UnitPrice\": \"18.0000\",\r\n\t\t\t\t\"UnitsInStock\": 39,\r\n\t\t\t\t\"UnitsOnOrder\": 0,\r\n\t\t\t\t\"ReorderLevel\": 10,\r\n\t\t\t\t\"Discontinued\": false,\r\n\t\t\t\t\"Category\": {\r\n\t\t\t\t\t\"__deferred\": {\r\n\t\t\t\t\t\t\"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)/Category\"\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\"Order_Details\": {\r\n\t\t\t\t\t\"__deferred\": {\r\n\t\t\t\t\t\t\"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)/Order_Details\"\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\"Supplier\": {\r\n\t\t\t\t\t\"__deferred\": {\r\n\t\t\t\t\t\t\"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)/Supplier\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t...\r\n\r\n````\r\n注目は、問い合わせURLが`Product`ではなく`Products`となっているところです。こちらは、後述する`EntitySet`にて取り上げます。\r\n\r\n## Association\r\n\r\n### Association\r\n\r\n2つ以上のEntiryTypeの関連を定義したものです。RDBMSのスキーマ定義における外部キーに相当します。先ほどの2つのEntityType`Category`と`Entity`には関連がありますので、それを見てみましょう。\r\n\r\n````xml\r\n<Association Name=\"FK_Products_Categories\">\r\n\t<End Role=\"Categories\" Type=\"NorthwindModel.Category\" Multiplicity=\"0..1\"/>\r\n\t<End Role=\"Products\" Type=\"NorthwindModel.Product\" Multiplicity=\"*\"/>\r\n\t<ReferentialConstraint>\r\n\t\t<Principal Role=\"Categories\">\r\n\t\t\t<PropertyRef Name=\"CategoryID\"/>\r\n\t\t</Principal>\r\n\t\t<Dependent Role=\"Products\">\r\n\t\t\t<PropertyRef Name=\"CategoryID\"/>\r\n\t\t</Dependent>\r\n\t</ReferentialConstraint>\r\n</Association>\r\n````\r\n2つの関連するEntityTypeとそれぞれのKeyが定義されています。`Multiplicity`にて関連の多重度が定義されています。いままでRDBMSに携わっていた方であれば、容易に理解できると思います。\r\n\r\n## EntityConteinerとAssociationSet、EntitySet\r\n\r\n### EntityConteiner\r\n\r\nODataServiceが外部に公開するI/Fを納めたコンテナ定義です。  \r\n上で挙げた`EntityType`や`Association`はODataService内部の定義であって、外部の利用者はEntityConteinerにて公開されているI/Fを利用します。\r\n\r\n### EntitySet\r\n\r\nEntityTypeの外部公開I/F名。`Product`の場合、EntitySetの名前が`Products`となっているため、外部からアクセスする場合は`Products`を利用します。慣例でEntityTypeの複数系で、Entitiesを表すことが多いようです。\r\n\r\n以下にEntityConteinerとEntitySetを抜粋します。\r\n\r\n````xml\r\n<Schema xmlns:d=\"http://schemas.microsoft.com/ado/2007/08/dataservices\" xmlns:m=\"http://schemas.microsoft.com/ado/2007/08/dataservices/metadata\" xmlns=\"http://schemas.microsoft.com/ado/2008/09/edm\" Namespace=\"ODataWeb.Northwind.Model\">\r\n\t<EntityContainer xmlns:p7=\"http://schemas.microsoft.com/ado/2009/02/edm/annotation\" Name=\"NorthwindEntities\" p7:LazyLoadingEnabled=\"true\" m:IsDefaultEntityContainer=\"true\">\r\n\t\t<EntitySet Name=\"Categories\" EntityType=\"NorthwindModel.Category\"/>\r\n\t\t<EntitySet Name=\"CustomerDemographics\" EntityType=\"NorthwindModel.CustomerDemographic\"/>\r\n\t\t<EntitySet Name=\"Customers\" EntityType=\"NorthwindModel.Customer\"/>\r\n\t\t<EntitySet Name=\"Employees\" EntityType=\"NorthwindModel.Employee\"/>\r\n\t\t<EntitySet Name=\"Order_Details\" EntityType=\"NorthwindModel.Order_Detail\"/>\r\n\t\t<EntitySet Name=\"Orders\" EntityType=\"NorthwindModel.Order\"/>\r\n\t\t<EntitySet Name=\"Products\" EntityType=\"NorthwindModel.Product\"/>\r\n\r\n\t\t...\r\n\r\n\t</EntityContainer>\r\n</Schema>\r\n````\r\n\r\n### AssociationSet\r\n\r\nEntitySetと同じくAssociationの外部公開I/F名。以下が`FK_Products_Categories`のAssociationSet定義です。AssociationSetもEntityConteiner内部に格納されています。\r\n\r\n\r\n````xml\r\n<AssociationSet Name=\"FK_Products_Categories\" Association=\"NorthwindModel.FK_Products_Categories\">\r\n\t<End Role=\"Categories\" EntitySet=\"Categories\"/>\r\n\t<End Role=\"Products\" EntitySet=\"Products\"/>\r\n</AssociationSet>\r\n````\r\n\r\nODataを利用した実際の開発では、このようにODataServiceが提供するMetadataを参照しながら行っていきます。  \r\nこれまでのWeb開発での、RDBMSのスキーマ定義を参照しながら開発することと何ら変わりない事が理解できると思います。\r\n\r\n**[[⬆]](#table)**\r\n\r\n<a name=\"manipulating\">4. ODataServiceをURLで操作する</a>\r\n========\r\n\r\n早速、ODataServiceを操作してみましょう。先述した通り、ODataはデータAPIであるため、ブラウザのアドレスバーにURLを入力することによってアクセスすることが出来ます。 \r\nURLのクエリパラメータをいくつか追加していくことでODataServiceの振る舞いを柔軟に変える事が出来ます。実際に検索、ページングなどデータの取得シーンを想定し、ODataが利用するメリットを十分体験してみてください。  \r\n\r\nODataServiceはNorthwindを利用します。Metadataを確認する場合はこちらを参照してください。\r\n<http://services.odata.org/V2/Northwind/Northwind.svc/$metadata>\r\n\r\n> ブラウザではなくデータAPIのテスト専用に作られたRESTクライアントツールを利用することを推奨します。こちらのChrome extentionsの[POATMAN](https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm)は、非常に操作しやすくRESTクライアントとして一番のおすすめです。  \r\nブラウザのみでデータアクセスする際は、こちらのChrome extentionsの[JSONVIew](https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc)だけでもインストールしておくといいでしょう。\r\n\r\n## OdataService\r\n\r\n### EntityConteiner(endpoint)\r\n\r\nでは、ODataServiceが提供するEntityConteinerの情報を取得します。このURLが以降のデータアクセスのルートとなるため、以降endpointと呼びます。  \r\n<http://services.odata.org/V2/Northwind/Northwind.svc/>\r\n\r\n結果は以下の通りです。  \r\n（レスポンスで取得した結果のデータが非常に大きいため、中身を割愛しながら説明していきます。ご了承ください。）\r\n\r\n````xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\r\n<service xml:base=\"http://services.odata.org/V2/Northwind/Northwind.svc/\" \r\n    xmlns:atom=\"http://www.w3.org/2005/Atom\" \r\n    xmlns:app=\"http://www.w3.org/2007/app\" \r\n    xmlns=\"http://www.w3.org/2007/app\">\r\n    <workspace>\r\n        <atom:title>Default</atom:title>\r\n        <collection href=\"Categories\">\r\n            <atom:title>Categories</atom:title>\r\n        </collection>\r\n        <collection href=\"CustomerDemographics\">\r\n            <atom:title>CustomerDemographics</atom:title>\r\n        </collection>\r\n        <collection href=\"Customers\">\r\n            <atom:title>Customers</atom:title>\r\n        </collection>\r\n        <collection href=\"Employees\">\r\n            <atom:title>Employees</atom:title>\r\n        </collection>\r\n        <collection href=\"Order_Details\">\r\n            <atom:title>Order_Details</atom:title>\r\n        </collection>\r\n        <collection href=\"Orders\">\r\n            <atom:title>Orders</atom:title>\r\n        </collection>\r\n        <collection href=\"Products\">\r\n            <atom:title>Products</atom:title>\r\n        </collection>\r\n        <collection href=\"Regions\">\r\n            <atom:title>Regions</atom:title>\r\n        </collection>\r\n\r\n        ...\r\n\r\n    </workspace>\r\n</service>\r\n````\r\nこれがNorthwindのODataServiceが提供するデータアクセスAPIのインターフェース定義です。  \r\nより詳細な内容は次の`Metadata`を取得して確認します。\r\n\r\n**[[⬆]](#table)**\r\n\r\n### Metadata\r\nMetadataを取得するためにはendpointのURLの後ろに`$metadata`を付与します。  \r\n<http://services.odata.org/V2/Northwind/Northwind.svc/$metadata>\r\n\r\n結果は以下の通りです。\r\n````xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\r\n<edmx:Edmx Version=\"1.0\" \r\n    xmlns:edmx=\"http://schemas.microsoft.com/ado/2007/06/edmx\">\r\n  <edmx:DataServices \r\n        xmlns:m=\"http://schemas.microsoft.com/ado/2007/08/dataservices/metadata\" m:DataServiceVersion=\"1.0\">\r\n    <Schema Namespace=\"NorthwindModel\" \r\n            xmlns:d=\"http://schemas.microsoft.com/ado/2007/08/dataservices\" \r\n            xmlns:m=\"http://schemas.microsoft.com/ado/2007/08/dataservices/metadata\" \r\n            xmlns=\"http://schemas.microsoft.com/ado/2008/09/edm\">\r\n      <EntityType Name=\"Category\">\r\n        <Key>\r\n          <PropertyRef Name=\"CategoryID\" />\r\n        </Key>\r\n        <Property Name=\"CategoryID\" Type=\"Edm.Int32\" Nullable=\"false\" p8:StoreGeneratedPattern=\"Identity\" \r\n                    xmlns:p8=\"http://schemas.microsoft.com/ado/2009/02/edm/annotation\" />\r\n        <Property Name=\"CategoryName\" Type=\"Edm.String\" Nullable=\"false\" MaxLength=\"15\" Unicode=\"true\" FixedLength=\"false\" />\r\n        <Property Name=\"Description\" Type=\"Edm.String\" Nullable=\"true\" MaxLength=\"Max\" Unicode=\"true\" FixedLength=\"false\" />\r\n        <Property Name=\"Picture\" Type=\"Edm.Binary\" Nullable=\"true\" MaxLength=\"Max\" FixedLength=\"false\" />\r\n        <NavigationProperty Name=\"Products\" Relationship=\"NorthwindModel.FK_Products_Categories\" FromRole=\"Categories\" ToRole=\"Products\" />\r\n      </EntityType>\r\n\r\n      ...\r\n\r\n      <Association Name=\"FK_Products_Categories\">\r\n        <End Role=\"Categories\" Type=\"NorthwindModel.Category\" Multiplicity=\"0..1\" />\r\n        <End Role=\"Products\" Type=\"NorthwindModel.Product\" Multiplicity=\"*\" />\r\n        <ReferentialConstraint>\r\n          <Principal Role=\"Categories\">\r\n            <PropertyRef Name=\"CategoryID\" />\r\n          </Principal>\r\n          <Dependent Role=\"Products\">\r\n            <PropertyRef Name=\"CategoryID\" />\r\n          </Dependent>\r\n        </ReferentialConstraint>\r\n      </Association>\r\n\r\n      ...\r\n\r\n    </Schema>\r\n    <Schema Namespace=\"ODataWeb.Northwind.Model\" \r\n                                        xmlns:d=\"http://schemas.microsoft.com/ado/2007/08/dataservices\" \r\n                                        xmlns:m=\"http://schemas.microsoft.com/ado/2007/08/dataservices/metadata\" \r\n                                        xmlns=\"http://schemas.microsoft.com/ado/2008/09/edm\">\r\n      <EntityContainer Name=\"NorthwindEntities\" p7:LazyLoadingEnabled=\"true\" m:IsDefaultEntityContainer=\"true\" \r\n                                            xmlns:p7=\"http://schemas.microsoft.com/ado/2009/02/edm/annotation\">\r\n        <EntitySet Name=\"Categories\" EntityType=\"NorthwindModel.Category\" />\r\n        <EntitySet Name=\"CustomerDemographics\" EntityType=\"NorthwindModel.CustomerDemographic\" />\r\n        <EntitySet Name=\"Customers\" EntityType=\"NorthwindModel.Customer\" />\r\n        <EntitySet Name=\"Employees\" EntityType=\"NorthwindModel.Employee\" />\r\n        <EntitySet Name=\"Order_Details\" EntityType=\"NorthwindModel.Order_Detail\" />\r\n        \r\n        ...\r\n\r\n        <AssociationSet Name=\"FK_Products_Categories\" Association=\"NorthwindModel.FK_Products_Categories\">\r\n          <End Role=\"Categories\" EntitySet=\"Categories\" />\r\n          <End Role=\"Products\" EntitySet=\"Products\" />\r\n        </AssociationSet>\r\n\r\n        ...\r\n\r\n      </EntityContainer>\r\n    </Schema>\r\n  </edmx:DataServices>\r\n</edmx:Edmx>\r\n````\r\nMetadataはXMLで返されます。  \r\nOdataServiceは複数のEntityを統合して公開できる能力を持っているため、複数のEntityを利用する場合は、EntityごとにODataServiceを作成してクライアントマッシュアップで統合するよりは、単一のODataServiceの中に含めてしまう方が経験的に良いと考えています。\r\n\r\n**[[⬆]](#table)**\r\n\r\n## Entitiesアクセス\r\n\r\n### Entities\r\nでは、ProductsのEntitiesを取得してみましょう。 \r\nEntitiesにアクセスするためにはendpointのURLの後ろに`EntitySet名`を付与します。   \r\n<http://services.odata.org/V2/Northwind/Northwind.svc/Products>\r\n\r\n結果は以下の通りです。\r\n````xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\r\n<feed xml:base=\"http://services.odata.org/V2/Northwind/Northwind.svc/\" \r\n    xmlns:d=\"http://schemas.microsoft.com/ado/2007/08/dataservices\" \r\n    xmlns:m=\"http://schemas.microsoft.com/ado/2007/08/dataservices/metadata\" \r\n    xmlns=\"http://www.w3.org/2005/Atom\">\r\n  <title type=\"text\">Products</title>\r\n  <id>\r\n    http://services.odata.org/V2/Northwind/Northwind.svc/Products\r\n  </id>\r\n  <updated>2014-07-20T14:26:33Z</updated>\r\n  <link rel=\"self\" title=\"Products\" href=\"Products\" />\r\n  <entry>\r\n    <id>\r\n      http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)\r\n    </id>\r\n    <title type=\"text\"></title>\r\n    <updated>2014-07-20T14:26:33Z</updated>\r\n    <author>\r\n      <name />\r\n    </author>\r\n    <link rel=\"edit\" title=\"Product\" href=\"Products(1)\" />\r\n    <link rel=\"http://schemas.microsoft.com/ado/2007/08/dataservices/related/Category\" type=\"application/atom+xml;type=entry\" title=\"Category\" href=\"Products(1)/Category\" />\r\n    <link rel=\"http://schemas.microsoft.com/ado/2007/08/dataservices/related/Order_Details\" type=\"application/atom+xml;type=feed\" title=\"Order_Details\" href=\"Products(1)/Order_Details\" />\r\n    <link rel=\"http://schemas.microsoft.com/ado/2007/08/dataservices/related/Supplier\" type=\"application/atom+xml;type=entry\" title=\"Supplier\" href=\"Products(1)/Supplier\" />\r\n    <category term=\"NorthwindModel.Product\" scheme=\"http://schemas.microsoft.com/ado/2007/08/dataservices/scheme\" />\r\n    <content type=\"application/xml\">\r\n      <m:properties>\r\n        <d:ProductID m:type=\"Edm.Int32\">1</d:ProductID>\r\n        <d:ProductName m:type=\"Edm.String\">Chai</d:ProductName>\r\n        <d:SupplierID m:type=\"Edm.Int32\">1</d:SupplierID>\r\n        <d:CategoryID m:type=\"Edm.Int32\">1</d:CategoryID>\r\n        <d:QuantityPerUnit m:type=\"Edm.String\">10 boxes x 20 bags</d:QuantityPerUnit>\r\n        <d:UnitPrice m:type=\"Edm.Decimal\">18.0000</d:UnitPrice>\r\n        <d:UnitsInStock m:type=\"Edm.Int16\">39</d:UnitsInStock>\r\n        <d:UnitsOnOrder m:type=\"Edm.Int16\">0</d:UnitsOnOrder>\r\n        <d:ReorderLevel m:type=\"Edm.Int16\">10</d:ReorderLevel>\r\n        <d:Discontinued m:type=\"Edm.Boolean\">false</d:Discontinued>\r\n      </m:properties>\r\n    </content>\r\n  </entry>\r\n\r\n  ...\r\n\r\n</feed>\r\n````\r\n\r\n### $format\r\n先ほどのデータはXML形式でしたので、JSONで取得してみましょう。URLパラメータに`$format=json`を渡します。  \r\n<http://services.odata.org/V2/Northwind/Northwind.svc/Products?$format=json>\r\n\r\n結果は以下の通りです。\r\n````js\r\n{\r\n  \"d\": {\r\n    \"results\": [{\r\n        \"__metadata\": {\r\n          \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)\",\r\n          \"type\": \"NorthwindModel.Product\"\r\n        },\r\n        \"ProductID\": 1,\r\n        \"ProductName\": \"Chai\",\r\n        \"SupplierID\": 1,\r\n        \"CategoryID\": 1,\r\n        \"QuantityPerUnit\": \"10 boxes x 20 bags\",\r\n        \"UnitPrice\": \"18.0000\",\r\n        \"UnitsInStock\": 39,\r\n        \"UnitsOnOrder\": 0,\r\n        \"ReorderLevel\": 10,\r\n        \"Discontinued\": false,\r\n        \"Category\": {\r\n          \"__deferred\": {\r\n            \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)/Category\"\r\n          }\r\n        },\r\n        \"Order_Details\": {\r\n          \"__deferred\": {\r\n            \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)/Order_Details\"\r\n          }\r\n        },\r\n        \"Supplier\": {\r\n          \"__deferred\": {\r\n            \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)/Supplier\"\r\n          }\r\n        }\r\n      },\r\n\r\n      ...\r\n\r\n````\r\n`$format`パラメータを渡すことでレスポンスのデータ形式を指定できます。以降のURLアクセスはJSONで行います。\r\n\r\n### $select\r\n次に取得データ項目の取捨選択の方法です。  \r\nプルダウンを作るためにデータ取得する想定だとします。先ほどのデータでは必要ない項目まで取得されてしまうため、必要な項目だけにしぼってデータを取得しましょう。今回はProductIDとProductNameが欲しいとします。URLパラメータに`$select=ProductID,ProductName`を渡します。  \r\n<http://services.odata.org/V2/Northwind/Northwind.svc/Products?$format=json&$select=ProductID,ProductName>\r\n\r\n結果は以下の通りです。\r\n````js\r\n{\r\n  \"d\": {\r\n    \"results\": [{\r\n        \"__metadata\": {\r\n          \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)\",\r\n          \"type\": \"NorthwindModel.Product\"\r\n        },\r\n        \"ProductID\": 1,\r\n        \"ProductName\": \"Chai\"\r\n      }, {\r\n        \"__metadata\": {\r\n          \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(2)\",\r\n          \"type\": \"NorthwindModel.Product\"\r\n        },\r\n        \"ProductID\": 2,\r\n        \"ProductName\": \"Chang\"\r\n      }, {\r\n        \"__metadata\": {\r\n          \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(3)\",\r\n          \"type\": \"NorthwindModel.Product\"\r\n        },\r\n        \"ProductID\": 3,\r\n        \"ProductName\": \"Aniseed Syrup\"\r\n      },\r\n\r\n       ...\r\n\r\n````\r\n`$select`に複数のデータ項目を渡したい場合は`,（カンマ）`で区切って渡してください。後述するNavigationを絡めた複雑なパターンにも対応できます。\r\n\r\n### $count\r\n問い合わせるデータの件数を取得したい場合はURLに`$count`を付与します。  \r\n<http://services.odata.org/V2/Northwind/Northwind.svc/Products/$count>\r\n\r\n結果は以下の通りです。\r\n````js\r\n77\r\n````\r\n\r\n### $top\r\nここからはページングを想定したデータアクセスを想定して話を進めていきます。  \r\n3件ごとにページ遷移すると仮定して最初の5件を取得します。URLパラメータに`$top=3`を渡します。  \r\n<http://services.odata.org/V2/Northwind/Northwind.svc/Products?$format=json&$top=3>\r\n\r\n結果は以下の通りです。\r\n````js\r\n{\r\n  \"d\": [{\r\n    \"__metadata\": {\r\n      \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)\",\r\n      \"type\": \"NorthwindModel.Product\"\r\n    },\r\n    \"ProductID\": 1,\r\n    \"ProductName\": \"Chai\",\r\n    \"SupplierID\": 1,\r\n    \"CategoryID\": 1,\r\n    \"QuantityPerUnit\": \"10 boxes x 20 bags\",\r\n    \"UnitPrice\": \"18.0000\",\r\n    \"UnitsInStock\": 39,\r\n    \"UnitsOnOrder\": 0,\r\n    \"ReorderLevel\": 10,\r\n    \"Discontinued\": false,\r\n    \"Category\": {\r\n      \"__deferred\": {\r\n        \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)/Category\"\r\n      }\r\n    },\r\n    \"Order_Details\": {\r\n      \"__deferred\": {\r\n        \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)/Order_Details\"\r\n      }\r\n    },\r\n    \"Supplier\": {\r\n      \"__deferred\": {\r\n        \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)/Supplier\"\r\n      }\r\n    }\r\n  }, {\r\n    \"__metadata\": {\r\n      \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(2)\",\r\n      \"type\": \"NorthwindModel.Product\"\r\n    },\r\n    \"ProductID\": 2,\r\n    \"ProductName\": \"Chang\",\r\n    \"SupplierID\": 1,\r\n    \"CategoryID\": 1,\r\n    \"QuantityPerUnit\": \"24 - 12 oz bottles\",\r\n    \"UnitPrice\": \"19.0000\",\r\n    \"UnitsInStock\": 17,\r\n    \"UnitsOnOrder\": 40,\r\n    \"ReorderLevel\": 25,\r\n    \"Discontinued\": false,\r\n    \"Category\": {\r\n      \"__deferred\": {\r\n        \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(2)/Category\"\r\n      }\r\n    },\r\n    \"Order_Details\": {\r\n      \"__deferred\": {\r\n        \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(2)/Order_Details\"\r\n      }\r\n    },\r\n    \"Supplier\": {\r\n      \"__deferred\": {\r\n        \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(2)/Supplier\"\r\n      }\r\n    }\r\n  }, {\r\n    \"__metadata\": {\r\n      \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(3)\",\r\n      \"type\": \"NorthwindModel.Product\"\r\n    },\r\n    \"ProductID\": 3,\r\n    \"ProductName\": \"Aniseed Syrup\",\r\n    \"SupplierID\": 1,\r\n    \"CategoryID\": 2,\r\n    \"QuantityPerUnit\": \"12 - 550 ml bottles\",\r\n    \"UnitPrice\": \"10.0000\",\r\n    \"UnitsInStock\": 13,\r\n    \"UnitsOnOrder\": 70,\r\n    \"ReorderLevel\": 25,\r\n    \"Discontinued\": false,\r\n    \"Category\": {\r\n      \"__deferred\": {\r\n        \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(3)/Category\"\r\n      }\r\n    },\r\n    \"Order_Details\": {\r\n      \"__deferred\": {\r\n        \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(3)/Order_Details\"\r\n      }\r\n    },\r\n    \"Supplier\": {\r\n      \"__deferred\": {\r\n        \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(3)/Supplier\"\r\n      }\r\n    }\r\n  }]\r\n}\r\n````\r\nProductIDが`1~3`の3件取得していることが分かります。\r\n\r\n### $skip\r\nでは次の3件を取得します。URLパラメータに`$top=3&$skip=3`を渡します。\r\n$skipを指定することで最初の5件をスキップします。  \r\n<http://services.odata.org/V2/Northwind/Northwind.svc/Products?$format=json&$top=3&$skip=3>\r\n\r\n結果は以下の通りです。\r\n````js\r\n{\r\n  \"d\": [{\r\n    \"__metadata\": {\r\n      \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(4)\",\r\n      \"type\": \"NorthwindModel.Product\"\r\n    },\r\n    \"ProductID\": 4,\r\n    \"ProductName\": \"Chef Anton's Cajun Seasoning\",\r\n    \"SupplierID\": 2,\r\n    \"CategoryID\": 2,\r\n    \"QuantityPerUnit\": \"48 - 6 oz jars\",\r\n    \"UnitPrice\": \"22.0000\",\r\n    \"UnitsInStock\": 53,\r\n    \"UnitsOnOrder\": 0,\r\n    \"ReorderLevel\": 0,\r\n    \"Discontinued\": false,\r\n    \"Category\": {\r\n      \"__deferred\": {\r\n        \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(4)/Category\"\r\n      }\r\n    },\r\n    \"Order_Details\": {\r\n      \"__deferred\": {\r\n        \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(4)/Order_Details\"\r\n      }\r\n    },\r\n    \"Supplier\": {\r\n      \"__deferred\": {\r\n        \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(4)/Supplier\"\r\n      }\r\n    }\r\n  }, {\r\n    \"__metadata\": {\r\n      \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(5)\",\r\n      \"type\": \"NorthwindModel.Product\"\r\n    },\r\n    \"ProductID\": 5,\r\n    \"ProductName\": \"Chef Anton's Gumbo Mix\",\r\n    \"SupplierID\": 2,\r\n    \"CategoryID\": 2,\r\n    \"QuantityPerUnit\": \"36 boxes\",\r\n    \"UnitPrice\": \"21.3500\",\r\n    \"UnitsInStock\": 0,\r\n    \"UnitsOnOrder\": 0,\r\n    \"ReorderLevel\": 0,\r\n    \"Discontinued\": true,\r\n    \"Category\": {\r\n      \"__deferred\": {\r\n        \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(5)/Category\"\r\n      }\r\n    },\r\n    \"Order_Details\": {\r\n      \"__deferred\": {\r\n        \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(5)/Order_Details\"\r\n      }\r\n    },\r\n    \"Supplier\": {\r\n      \"__deferred\": {\r\n        \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(5)/Supplier\"\r\n      }\r\n    }\r\n  }, {\r\n    \"__metadata\": {\r\n      \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(6)\",\r\n      \"type\": \"NorthwindModel.Product\"\r\n    },\r\n    \"ProductID\": 6,\r\n    \"ProductName\": \"Grandma's Boysenberry Spread\",\r\n    \"SupplierID\": 3,\r\n    \"CategoryID\": 2,\r\n    \"QuantityPerUnit\": \"12 - 8 oz jars\",\r\n    \"UnitPrice\": \"25.0000\",\r\n    \"UnitsInStock\": 120,\r\n    \"UnitsOnOrder\": 0,\r\n    \"ReorderLevel\": 25,\r\n    \"Discontinued\": false,\r\n    \"Category\": {\r\n      \"__deferred\": {\r\n        \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(6)/Category\"\r\n      }\r\n    },\r\n    \"Order_Details\": {\r\n      \"__deferred\": {\r\n        \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(6)/Order_Details\"\r\n      }\r\n    },\r\n    \"Supplier\": {\r\n      \"__deferred\": {\r\n        \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(6)/Supplier\"\r\n      }\r\n    }\r\n  }]\r\n}\r\n````\r\n今度はProductIDが`4~6`の3件取得していることが分かります。\r\n\r\n### $orderby\r\n次は、orderby指定をしてみます。`ProductID`の降順を指定します。URLパラメータに`$orderby=ProductID desc`を渡します。  \r\n<http://services.odata.org/V2/Northwind/Northwind.svc/Products?$format=json&$orderby=ProductID desc>\r\n\r\n結果は以下の通りです。\r\n````js\r\n{\r\n  \"d\": {\r\n    \"results\": [{\r\n        \"__metadata\": {\r\n          \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(77)\",\r\n          \"type\": \"NorthwindModel.Product\"\r\n        },\r\n        \"ProductID\": 77,\r\n        \"ProductName\": \"Original Frankfurter grüne Soße\",\r\n        \"SupplierID\": 12,\r\n        \"CategoryID\": 2,\r\n        \"QuantityPerUnit\": \"12 boxes\",\r\n        \"UnitPrice\": \"13.0000\",\r\n        \"UnitsInStock\": 32,\r\n        \"UnitsOnOrder\": 0,\r\n        \"ReorderLevel\": 15,\r\n        \"Discontinued\": false,\r\n        \"Category\": {\r\n          \"__deferred\": {\r\n            \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(77)/Category\"\r\n          }\r\n        },\r\n        \"Order_Details\": {\r\n          \"__deferred\": {\r\n            \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(77)/Order_Details\"\r\n          }\r\n        },\r\n        \"Supplier\": {\r\n          \"__deferred\": {\r\n            \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(77)/Supplier\"\r\n          }\r\n        }\r\n      }, {\r\n        \"__metadata\": {\r\n          \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(76)\",\r\n          \"type\": \"NorthwindModel.Product\"\r\n        },\r\n        \"ProductID\": 76,\r\n        \"ProductName\": \"Lakkalikööri\",\r\n        \"SupplierID\": 23,\r\n        \"CategoryID\": 1,\r\n        \"QuantityPerUnit\": \"500 ml\",\r\n        \"UnitPrice\": \"18.0000\",\r\n        \"UnitsInStock\": 57,\r\n        \"UnitsOnOrder\": 0,\r\n        \"ReorderLevel\": 20,\r\n        \"Discontinued\": false,\r\n        \"Category\": {\r\n          \"__deferred\": {\r\n            \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(76)/Category\"\r\n          }\r\n        },\r\n        \"Order_Details\": {\r\n          \"__deferred\": {\r\n            \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(76)/Order_Details\"\r\n          }\r\n        },\r\n        \"Supplier\": {\r\n          \"__deferred\": {\r\n            \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(76)/Supplier\"\r\n          }\r\n        }\r\n      },\r\n\r\n      ...\r\n\r\n````\r\n`$orderby`のパラメータには`プロパティ名 順序`を指定します、順序を指定しない場合は`asc`指定となります。  \r\n複数指定する場合は`,(カンマ)`で区切って指定してください。  \r\n試しにSupplierID, CategoryIDの昇順でデータを取得しましょう。  \r\n<http://services.odata.org/V2/Northwind/Northwind.svc/Products?$format=json&$orderby=SupplierID, CategoryID>\r\n\r\n結果は以下の通りです。\r\n````js\r\n{\r\n  \"d\": {\r\n    \"results\": [{\r\n        \"__metadata\": {\r\n          \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)\",\r\n          \"type\": \"NorthwindModel.Product\"\r\n        },\r\n        \"ProductID\": 1,\r\n        \"ProductName\": \"Chai\",\r\n        \"SupplierID\": 1,\r\n        \"CategoryID\": 1,\r\n        \"QuantityPerUnit\": \"10 boxes x 20 bags\",\r\n        \"UnitPrice\": \"18.0000\",\r\n        \"UnitsInStock\": 39,\r\n        \"UnitsOnOrder\": 0,\r\n        \"ReorderLevel\": 10,\r\n        \"Discontinued\": false,\r\n        \"Category\": {\r\n          \"__deferred\": {\r\n            \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)/Category\"\r\n          }\r\n        },\r\n        \"Order_Details\": {\r\n          \"__deferred\": {\r\n            \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)/Order_Details\"\r\n          }\r\n        },\r\n        \"Supplier\": {\r\n          \"__deferred\": {\r\n            \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)/Supplier\"\r\n          }\r\n        }\r\n      }, {\r\n        \"__metadata\": {\r\n          \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(2)\",\r\n          \"type\": \"NorthwindModel.Product\"\r\n        },\r\n        \"ProductID\": 2,\r\n        \"ProductName\": \"Chang\",\r\n        \"SupplierID\": 1,\r\n        \"CategoryID\": 1,\r\n        \"QuantityPerUnit\": \"24 - 12 oz bottles\",\r\n        \"UnitPrice\": \"19.0000\",\r\n        \"UnitsInStock\": 17,\r\n        \"UnitsOnOrder\": 40,\r\n        \"ReorderLevel\": 25,\r\n        \"Discontinued\": false,\r\n        \"Category\": {\r\n          \"__deferred\": {\r\n            \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(2)/Category\"\r\n          }\r\n        },\r\n        \"Order_Details\": {\r\n          \"__deferred\": {\r\n            \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(2)/Order_Details\"\r\n          }\r\n        },\r\n        \"Supplier\": {\r\n          \"__deferred\": {\r\n            \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(2)/Supplier\"\r\n          }\r\n        }\r\n      },\r\n\r\n      ...\r\n\r\n````\r\n\r\n### $filter\r\n次は、検索処理を想定したデータ取得です。Entitiesに対して何らかのfilter処理を加える場合、URLパラメータに`$filter`を渡します。`$filter`のパラメータは`プロパティ名 演算子 条件値`を設定します。  \r\n試しにSupplierIDが1のデータを取得してみましょう。\r\n\r\n<http://services.odata.org/V2/Northwind/Northwind.svc/Products?$format=json&$filter=SupplierID eq 1>\r\n\r\n結果は以下の通りです。\r\n````js\r\n{\r\n  \"d\": {\r\n    \"results\": [{\r\n      \"__metadata\": {\r\n        \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)\",\r\n        \"type\": \"NorthwindModel.Product\"\r\n      },\r\n      \"ProductID\": 1,\r\n      \"ProductName\": \"Chai\",\r\n      \"SupplierID\": 1,\r\n      \"CategoryID\": 1,\r\n      \"QuantityPerUnit\": \"10 boxes x 20 bags\",\r\n      \"UnitPrice\": \"18.0000\",\r\n      \"UnitsInStock\": 39,\r\n      \"UnitsOnOrder\": 0,\r\n      \"ReorderLevel\": 10,\r\n      \"Discontinued\": false,\r\n      \"Category\": {\r\n        \"__deferred\": {\r\n          \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)/Category\"\r\n        }\r\n      },\r\n      \"Order_Details\": {\r\n        \"__deferred\": {\r\n          \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)/Order_Details\"\r\n        }\r\n      },\r\n      \"Supplier\": {\r\n        \"__deferred\": {\r\n          \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)/Supplier\"\r\n        }\r\n      }\r\n    }, {\r\n      \"__metadata\": {\r\n        \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(2)\",\r\n        \"type\": \"NorthwindModel.Product\"\r\n      },\r\n      \"ProductID\": 2,\r\n      \"ProductName\": \"Chang\",\r\n      \"SupplierID\": 1,\r\n      \"CategoryID\": 1,\r\n      \"QuantityPerUnit\": \"24 - 12 oz bottles\",\r\n      \"UnitPrice\": \"19.0000\",\r\n      \"UnitsInStock\": 17,\r\n      \"UnitsOnOrder\": 40,\r\n      \"ReorderLevel\": 25,\r\n      \"Discontinued\": false,\r\n      \"Category\": {\r\n        \"__deferred\": {\r\n          \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(2)/Category\"\r\n        }\r\n      },\r\n      \"Order_Details\": {\r\n        \"__deferred\": {\r\n          \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(2)/Order_Details\"\r\n        }\r\n      },\r\n      \"Supplier\": {\r\n        \"__deferred\": {\r\n          \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(2)/Supplier\"\r\n        }\r\n      }\r\n    }, {\r\n      \"__metadata\": {\r\n        \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(3)\",\r\n        \"type\": \"NorthwindModel.Product\"\r\n      },\r\n      \"ProductID\": 3,\r\n      \"ProductName\": \"Aniseed Syrup\",\r\n      \"SupplierID\": 1,\r\n      \"CategoryID\": 2,\r\n      \"QuantityPerUnit\": \"12 - 550 ml bottles\",\r\n      \"UnitPrice\": \"10.0000\",\r\n      \"UnitsInStock\": 13,\r\n      \"UnitsOnOrder\": 70,\r\n      \"ReorderLevel\": 25,\r\n      \"Discontinued\": false,\r\n      \"Category\": {\r\n        \"__deferred\": {\r\n          \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(3)/Category\"\r\n        }\r\n      },\r\n      \"Order_Details\": {\r\n        \"__deferred\": {\r\n          \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(3)/Order_Details\"\r\n        }\r\n      },\r\n      \"Supplier\": {\r\n        \"__deferred\": {\r\n          \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(3)/Supplier\"\r\n        }\r\n      }\r\n    }]\r\n  }\r\n}\r\n````\r\nSupplierIDが1に該当するデータが取得できていることが分かります。次は、SupplierIDが1でUnitsInStockが20以上のデータを取得してみましょう。  \r\n<http://services.odata.org/V2/Northwind/Northwind.svc/Products?$format=json&$filter=SupplierID eq 1 and UnitsInStock ge 20>\r\n\r\n結果は以下の通りです。\r\n````js\r\n{\r\n  \"d\": {\r\n    \"results\": [{\r\n      \"__metadata\": {\r\n        \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)\",\r\n        \"type\": \"NorthwindModel.Product\"\r\n      },\r\n      \"ProductID\": 1,\r\n      \"ProductName\": \"Chai\",\r\n      \"SupplierID\": 1,\r\n      \"CategoryID\": 1,\r\n      \"QuantityPerUnit\": \"10 boxes x 20 bags\",\r\n      \"UnitPrice\": \"18.0000\",\r\n      \"UnitsInStock\": 39,\r\n      \"UnitsOnOrder\": 0,\r\n      \"ReorderLevel\": 10,\r\n      \"Discontinued\": false,\r\n      \"Category\": {\r\n        \"__deferred\": {\r\n          \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)/Category\"\r\n        }\r\n      },\r\n      \"Order_Details\": {\r\n        \"__deferred\": {\r\n          \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)/Order_Details\"\r\n        }\r\n      },\r\n      \"Supplier\": {\r\n        \"__deferred\": {\r\n          \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)/Supplier\"\r\n        }\r\n      }\r\n    }]\r\n  }\r\n}\r\n````\r\nこのように$filterを利用することで検索処理に対して柔軟に対応できることがわかりました。  \r\n$filterには他にも多くの演算子が存在しています。詳細は[こちら](http://www.odata.org/documentation/odata-version-2-0/uri-conventions/#FilterSystemQueryOption)で確認できます。\r\n\r\n### $expand\r\n最後に、Navigationを使った関連するEntityTypeに関するデータアクセスの方法を学びます。  \r\n例を挙げると、EntitySet`Product`には`CategoryID`が含まれていますが、実際に表示したい値は`CategoryName`で、これは`Category`上にあるといったシーンです。企業向けWebアプリケーションにおいては比較的よくあるシーンです。\r\n\r\nODataにはNavigationを使って関連するEntityTypeのデータを取得する方法が仕様化されているため、URLパラメータから柔軟に指定することが可能です。  \r\n試しに`Category`と`Supplier`のデータを`Product`と一緒に取得してみましょう。URLパラメータに`$expand`を渡します。`$expand`のパラメータは`NavigationPropertyのname属性`を設定します。  \r\n<http://services.odata.org/V2/Northwind/Northwind.svc/Products?$format=json&$expand=Category, Supplier>\r\n\r\n結果は以下の通りです。\r\n````js\r\n{\r\n  \"d\": {\r\n    \"results\": [{\r\n        \"__metadata\": {\r\n          \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)\",\r\n          \"type\": \"NorthwindModel.Product\"\r\n        },\r\n        \"ProductID\": 1,\r\n        \"ProductName\": \"Chai\",\r\n        \"SupplierID\": 1,\r\n        \"CategoryID\": 1,\r\n        \"QuantityPerUnit\": \"10 boxes x 20 bags\",\r\n        \"UnitPrice\": \"18.0000\",\r\n        \"UnitsInStock\": 39,\r\n        \"UnitsOnOrder\": 0,\r\n        \"ReorderLevel\": 10,\r\n        \"Discontinued\": false,\r\n        \"Category\": {\r\n          \"__metadata\": {\r\n            \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Categories(1)\",\r\n            \"type\": \"NorthwindModel.Category\"\r\n          },\r\n          \"CategoryID\": 1,\r\n          \"CategoryName\": \"Beverages\",\r\n          \"Description\": \"Soft drinks, coffees, teas, beers, and ales\",\r\n          \"Picture\": \"\",\r\n          \"Products\": {\r\n            \"__deferred\": {\r\n              \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Categories(1)/Products\"\r\n            }\r\n          }\r\n        },\r\n        \"Order_Details\": {\r\n          \"__deferred\": {\r\n            \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)/Order_Details\"\r\n          }\r\n        },\r\n        \"Supplier\": {\r\n          \"__metadata\": {\r\n            \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Suppliers(1)\",\r\n            \"type\": \"NorthwindModel.Supplier\"\r\n          },\r\n          \"SupplierID\": 1,\r\n          \"CompanyName\": \"Exotic Liquids\",\r\n          \"ContactName\": \"Charlotte Cooper\",\r\n          \"ContactTitle\": \"Purchasing Manager\",\r\n          \"Address\": \"49 Gilbert St.\",\r\n          \"City\": \"London\",\r\n          \"Region\": null,\r\n          \"PostalCode\": \"EC1 4SD\",\r\n          \"Country\": \"UK\",\r\n          \"Phone\": \"(171) 555-2222\",\r\n          \"Fax\": null,\r\n          \"HomePage\": null,\r\n          \"Products\": {\r\n            \"__deferred\": {\r\n              \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Suppliers(1)/Products\"\r\n            }\r\n          }\r\n        }\r\n      },\r\n\r\n      ...\r\n\r\n````\r\n`Category`と`Supplier`のデータも同時に取得できたことがわかります。   しかし、すべてのEntityTypeの値を取得しているため不要な値が含まれています。特に`Category`の`Picture`のデータ量は無視できません。\r\n\r\nこのようなデータの取捨選択を行うためにはどうすればよいのでしょうか？そう`$select`を使うべきです。  \r\n`$select`はEntityTypeに関連するEntityTypeについても有効です。`Category`と`Supplier`の双方について名称のみ取得するようにしましょう。URLパラメータに`$select=Category/CategoryName, Supplier/CompanyName`を追加します。  \r\n<http://services.odata.org/V2/Northwind/Northwind.svc/Products?$format=json&$expand=Category, Supplier&$select=Category/CategoryName, Supplier/CompanyName>\r\n\r\n結果は以下の通りです。\r\n````js\r\n{\r\n  \"d\": {\r\n    \"results\": [{\r\n        \"__metadata\": {\r\n          \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)\",\r\n          \"type\": \"NorthwindModel.Product\"\r\n        },\r\n        \"Category\": {\r\n          \"__metadata\": {\r\n            \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Categories(1)\",\r\n            \"type\": \"NorthwindModel.Category\"\r\n          },\r\n          \"CategoryName\": \"Beverages\"\r\n        },\r\n        \"Supplier\": {\r\n          \"__metadata\": {\r\n            \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Suppliers(1)\",\r\n            \"type\": \"NorthwindModel.Supplier\"\r\n          },\r\n          \"CompanyName\": \"Exotic Liquids\"\r\n        }\r\n      },\r\n\r\n      ...\r\n\r\n````\r\n今度は取得データをトリムしすぎてしまったようです。Category/CategoryName, Supplier/CompanyNameのみとなってしましました。元あったProductのEnityTypeを含めるためには`*`という特殊なエイリアスを`$select`のパラメータに含める必要があります。  \r\n<http://services.odata.org/V2/Northwind/Northwind.svc/Products?$format=json&$expand=Category, Supplier&$select=*, Category/CategoryName, Supplier/CompanyName>\r\n\r\n結果は以下の通りです。\r\n````js\r\n{\r\n  \"d\": {\r\n    \"results\": [{\r\n        \"__metadata\": {\r\n          \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)\",\r\n          \"type\": \"NorthwindModel.Product\"\r\n        },\r\n        \"ProductID\": 1,\r\n        \"ProductName\": \"Chai\",\r\n        \"SupplierID\": 1,\r\n        \"CategoryID\": 1,\r\n        \"QuantityPerUnit\": \"10 boxes x 20 bags\",\r\n        \"UnitPrice\": \"18.0000\",\r\n        \"UnitsInStock\": 39,\r\n        \"UnitsOnOrder\": 0,\r\n        \"ReorderLevel\": 10,\r\n        \"Discontinued\": false,\r\n        \"Category\": {\r\n          \"__metadata\": {\r\n            \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Categories(1)\",\r\n            \"type\": \"NorthwindModel.Category\"\r\n          },\r\n          \"CategoryName\": \"Beverages\"\r\n        },\r\n        \"Order_Details\": {\r\n          \"__deferred\": {\r\n            \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(1)/Order_Details\"\r\n          }\r\n        },\r\n        \"Supplier\": {\r\n          \"__metadata\": {\r\n            \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Suppliers(1)\",\r\n            \"type\": \"NorthwindModel.Supplier\"\r\n          },\r\n          \"CompanyName\": \"Exotic Liquids\"\r\n        }\r\n      },\r\n      \r\n      ...\r\n\r\n````\r\nこれで望みのデータを取得することができました。\r\n\r\n**[[⬆]](#table)**\r\n\r\n## Entityアクセス\r\n今まではEntitiesのリストに対するデータアクセスでしたが、ここからはEntitiesの中の1つのEntityに対する操作です。\r\n\r\n### key\r\nODataServiceが外部に公開するデータアクセス用のインターフェースはEntitySetです。これまでの例でいうと、これにアクセスするとリストが返されます。  \r\n1つのデータにアクセスするために最も効率の良い方法はEntitiesに対してEntityTypeの`key`を指定してアクセスする方法です。  \r\n（他にも$filterを使ってEntityを取得する方法もありますが、何らかの条件で必ず一意になることを保証しなければなりません。）  \r\nURL上でEntitiesのkeyを表現するためには、Entities名の後ろにkeyを`(`と`)`で囲んで指定します。EntityTypeでどのプロパティがkeyとなるかはmetadataにて確認できます。\r\n> EntityTypeのKeyは複数の項目を設定する複合Keyを作成することができますが、フロントエンドの取り回しを考慮して単一のKeyを設定することが良いと考えます。複合Keyを設定しなければならない場合は、プロパティを追加して一意なKeyを設定できないか検討してください。\r\n\r\nでは、`Products`のkeyは`ProductID`となっているので、ProductIDgが2に該当するデータを取得します。  \r\n<http://services.odata.org/V2/Northwind/Northwind.svc/Products(2)?$format=json>\r\n\r\n結果は以下の通りです。\r\n````js\r\n{\r\n  \"d\": {\r\n    \"__metadata\": {\r\n      \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(2)\",\r\n      \"type\": \"NorthwindModel.Product\"\r\n    },\r\n    \"ProductID\": 2,\r\n    \"ProductName\": \"Chang\",\r\n    \"SupplierID\": 1,\r\n    \"CategoryID\": 1,\r\n    \"QuantityPerUnit\": \"24 - 12 oz bottles\",\r\n    \"UnitPrice\": \"19.0000\",\r\n    \"UnitsInStock\": 17,\r\n    \"UnitsOnOrder\": 40,\r\n    \"ReorderLevel\": 25,\r\n    \"Discontinued\": false,\r\n    \"Category\": {\r\n      \"__deferred\": {\r\n        \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(2)/Category\"\r\n      }\r\n    },\r\n    \"Order_Details\": {\r\n      \"__deferred\": {\r\n        \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(2)/Order_Details\"\r\n      }\r\n    },\r\n    \"Supplier\": {\r\n      \"__deferred\": {\r\n        \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(2)/Supplier\"\r\n      }\r\n    }\r\n  }\r\n}\r\n````\r\n\r\nでは先ほどの$select、$expandを使って、関連EntityTypeの名称も同時に取得してみましょう。  \r\n<http://services.odata.org/V2/Northwind/Northwind.svc/Products(2)?$format=json&$expand=Category&$select=*, Category/CategoryName>\r\n\r\n結果は以下の通りです。\r\n````js\r\n{\r\n  \"d\": {\r\n    \"__metadata\": {\r\n      \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(2)\",\r\n      \"type\": \"NorthwindModel.Product\"\r\n    },\r\n    \"ProductID\": 2,\r\n    \"ProductName\": \"Chang\",\r\n    \"SupplierID\": 1,\r\n    \"CategoryID\": 1,\r\n    \"QuantityPerUnit\": \"24 - 12 oz bottles\",\r\n    \"UnitPrice\": \"19.0000\",\r\n    \"UnitsInStock\": 17,\r\n    \"UnitsOnOrder\": 40,\r\n    \"ReorderLevel\": 25,\r\n    \"Discontinued\": false,\r\n    \"Category\": {\r\n      \"__metadata\": {\r\n        \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Categories(1)\",\r\n        \"type\": \"NorthwindModel.Category\"\r\n      },\r\n      \"CategoryName\": \"Beverages\"\r\n    },\r\n    \"Order_Details\": {\r\n      \"__deferred\": {\r\n        \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(2)/Order_Details\"\r\n      }\r\n    },\r\n    \"Supplier\": {\r\n      \"__deferred\": {\r\n        \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Products(2)/Supplier\"\r\n      }\r\n    }\r\n  }\r\n}\r\n````\r\n\r\nでは、Entityの中の1つのプロパティにアクセスしましょう。URLのEntities名の後ろにプロパティ名を指定します。  \r\n`ProductName`にアクセスしてみます。  \r\n<http://services.odata.org/V2/Northwind/Northwind.svc/Products(2)/ProductName?$format=json>\r\n\r\n結果は以下の通りです。\r\n````js\r\n{\r\n  \"d\": {\r\n    \"ProductName\": \"Chang\"\r\n  }\r\n}\r\n````\r\nこのように、ODataの中ではEntitiesアクセスした際に取得したデータのプロパティを`/`で連結する事で、ダイレクトにプロパティへアクセスすることが可能です。  \r\n先ほどは$expand指定していた`Category`もプロパティとしてアクセスすることが可能です。  \r\n<http://services.odata.org/V2/Northwind/Northwind.svc/Products(2)/Category?$format=json>\r\n\r\n結果は以下の通りです。\r\n````js\r\n{\r\n  \"d\": {\r\n    \"__metadata\": {\r\n      \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Categories(1)\",\r\n      \"type\": \"NorthwindModel.Category\"\r\n    },\r\n    \"CategoryID\": 1,\r\n    \"CategoryName\": \"Beverages\",\r\n    \"Description\": \"Soft drinks, coffees, teas, beers, and ales\",\r\n    \"Picture\": \"FRwvAAIAAAANAA4AFAAhA    ..... \",\r\n    \"Products\": {\r\n      \"__deferred\": {\r\n        \"uri\": \"http://services.odata.org/V2/Northwind/Northwind.svc/Categories(1)/Products\"\r\n      }\r\n    }\r\n  }\r\n}\r\n````\r\n\r\nこのように、URLパラメータを介してODataServiceを柔軟に操作することができます。  \r\nこれまでの話はバックエンドのODataServiceに関するものでしたが、実際にODataserviceを利用してWebシステムを構築するためには、対となるフロントエンドのライブラリが必要です。  \r\n以降は、標準でODataをサポートしているOpenUI5を利用して、実際にODataServiceを利用したWebシステムを構築していきます。\r\n\r\n**[[⬆]](#table)**\r\n\r\n<a name=\"openui5withodata\">5. OpenUI5とODataServiceの統合</a>\r\n========\r\n\r\nこれからOpenUI5を使ったチュートリアルを行うに辺り、プロジェクトの環境面について説明します。\r\n\r\n<a name=\"install\">5.1. 導入・準備</a>\r\n========\r\n\r\nまず、チュートリアルを開始するには、以下のURLからチュートリアル用のGitリポジトリをCloneして、`bare`ブランチに移動してください。  \r\n実際にチュートリアルを行う際は`grunt`コマンドを実行します。Gruntの初期設定を行っていない方は、[こちら](http://gruntjs.com/getting-started)を参照してください。\r\n\r\n```git\r\ngit clone https://github.com/mitsuruog/Openui5-with-OdataService.git \r\ncd Openui5-with-OdataService\r\ngit checkout bare\r\nnpm install\r\ngrunt\r\n```\r\n\r\n`grunt`コマンドが正しく実行された場合は、<http://localhost:9000/>のページが自動表示されます。  \r\n\r\n**[[⬆]](#table)**\r\n\r\n<a name=\"project\">5.2. プロジェクトの説明</a>\r\n========\r\n\r\n先ほど`git clone`したプロジェクトのフォルダ構成は以下の通りです。\r\n```sh\r\n.\r\n├── ./Gruntfile.js\r\n├── ./LICENSE\r\n├── ./README.md\r\n├── ./app # -> 実際のアプリケーションではここがWebアクセスRootです。\r\n│   ├── ./app/Component.js\r\n│   ├── ./app/docs/img\r\n│   ├── ./app/index.html # -> このファイルが最初に呼び出されます。\r\n│   ├── ./app/style\r\n│   │   └── ./app/style/style.css\r\n│   └── ./app/view\r\n│       └── # -> ここにCoffeeScriptをコンパイルしたファイルが格納されます。\r\n├── ./bower.json\r\n├── ./coffee # -> ここ以下がチュートリアルで編集するファイルです。\r\n│   ├── ./coffee/Component.coffee\r\n│   ├── ./coffee/util\r\n│   └── ./coffee/view\r\n│       ├── ./coffee/view/App.controller.coffee\r\n│       ├── ./coffee/view/App.view.coffee\r\n│       ├── ./coffee/view/CategoryInfoForm.fragment.coffee\r\n│       ├── ./coffee/view/Detail.controller.coffee\r\n│       ├── ./coffee/view/Detail.view.coffee\r\n│       ├── ./coffee/view/Footer.fragment.coffee\r\n│       ├── ./coffee/view/Master.controller.coffee\r\n│       ├── ./coffee/view/Master.view.coffee\r\n│       ├── ./coffee/view/NotFound.controller.coffee\r\n│       ├── ./coffee/view/NotFound.view.coffee\r\n│       ├── ./coffee/view/ProductInfo.fragment.coffee\r\n│       ├── ./coffee/view/SearchList.fragment.coffee\r\n│       ├── ./coffee/view/SupplierAddressForm.fragment.coffee\r\n│       └── ./coffee/view/ViewSettings.fragment.coffee\r\n├── ./docs\r\n├── ./node_modules # -> gruntのタスクが格納されます。\r\n└── ./package.json\r\n```\r\n### CoffeeScriptのコンパイル\r\n\r\n本チュートリアルではJavascript部分はCoffeeScriptで記述してコンパイルによりJavascriptを生成する方式で行います。`grunt`コマンドを実行することで、`/coffee`配下のCoffeeScriptファイルの変更を監視して、変更時に自動でコンパイルするよう設定してあります。  \r\nコンパイル後のJavascriptは`/app`に出力します。  \r\nコンパイルがうまく行かない場合は、このフォルダのファイルを確認してください。\r\n\r\n### リバースプロキシ\r\n\r\n`localhost`で実行しているアプリケーションに対して、Northwindのドメイン`services.odata.org`のデータを利用することは、同一生成元ポリシー違反になるため、Gruntタスクにてリバースプロキシ設定を行っています。設定はこちらです。\r\n\r\n*Gruntfile.js*\r\n```js\r\nconnect: {\r\n  options: {\r\n  \t// ...\r\n  },\r\n  proxies: [{\r\n    context: '/V2',\r\n    host: \"services.odata.org\",\r\n    changeOrigin: true\r\n  }],\r\n  livereload: {\r\n    // ...\r\n  }\r\n},\r\n```\r\n### 初期状態の確認\r\n\r\n以下がチュートリアル開始時点のアプリケーションの状態です。  \r\nアプリケーションのUI部分についてはMockレベルで完成している状態です。OpenUI5の公式ドキュメントなどを参照することで、ここまでは完成させることができると思います。  \r\n経験上、ODataの扱いとODataを画面上にどのように組み込めば、Webアプリケーションとして完成するかが、最もつまづいたポイントです。以降のチュートリアルでは、ODataをOpenUI5にて用途ごとにどのように組み込めば良いかを中心に行います。\r\n\r\nまず、<http://localhost:9000/>にアクセスすると商品情報検索画面が表示されます。中の実装はまだですので、検索結果は空です。\r\n![初期状態1](docs/img/4-1.png)\r\n\r\n次に、<http://localhost:9000/#/product/1>にアクセスすると商品情報詳細画面が表示されます。当然、中の実装はまだですので、表示内容は空です。\r\n![初期状態2](docs/img/4-2.png)\r\n\r\n**[[⬆]](#table)**\r\n\r\n<a name=\"productlist_impl\">5.3 商品リストの実装</a>\r\n========\r\n\r\n## ODataServiceのendpoint定義\r\n\r\nまず、本アプリケーションにて利用するODataServiceのendpointを定義します。endpointの定義はアプリケーションで共用するため、`Componemt.coffee`の`init`内に記述します。\r\n\r\n*Componemt.coffee:init()*\r\n```coffeescript\r\ninit: ->\r\n  \r\n  ...\r\n\r\n  # ここにOdataServiceのエンドポイントを設定します\r\n  # /V2/Northwind/Northwind.svc/\r\n  endpoint = sap.ui.model.odata.ODataModel \"/V2/Northwind/Northwind.svc/\", true\r\n  @setModel endpoint\r\n```\r\n\r\n`sap.ui.model.odata.ODataModel`を作成し、名前なしのグローバルModelとしてアプリケーション内に保持します。\r\n\r\n## <a name=\"productlist\">5.3.a 商品リストの取得</a>\r\n商品リストを取得してTable上に表示させてみましょう。`view/SearchList.fragment.coffee`を開いてください。`view/SearchList.fragment.coffee`は商品リストテーブルのUI部分を切り出したUI部品です。商品リストテーブルUI（以下、商品リストテーブル）に関連する変更はこちらに記述していきます。\r\n\r\nまず、`view/SearchList.fragment.coffee`の`createContent`にて利用するODataServiceのEntitiesを指定します。このUIとODataを関連づける作業を**データバインド**と呼びます。\r\n\r\n*view/SearchList.fragment.coffee:createContent()*\r\n```coffeescript\r\n\t\r\n\t...\r\n\r\n  createContent: (oController) ->\r\n    new sap.m.Table\r\n      id: oController.getView().createId(\"productList\")\r\n      growing: true\r\n      growingThreshold: 5\r\n      growingTriggerText: \"もっと見る\"\r\n      noDataText: \"データがありません。\"\r\n      headerToolbar: @_createHeaderToolbar(oController)\r\n      columns: @_createHeaderColumns(oController)\r\n      # ここにODataをバインドしていきます。\r\n      items:\r\n        path: \"/Products\"\r\n        template: @_createTemplate(oController)\r\n\r\n    ...\r\n\r\n```\r\n`items`プロパティにデータバインドを定義していきます。`path`には利用するEntitiesを、`template`には1行を生成するためのテンプレート定義を設定します。\r\n\r\n結果は以下の通りです。\r\n![itemsにデータバインドのみ](docs/img/5.3.a-1.png)\r\n\r\n結果は48件表示されると思いますが、列の中身はすべて同じです。  \r\nこれはテンプレートの中身が固定値であるためです。次は、実際にテンプレートをODataの内容にあわせて表示させてみましょう。今度は`view/SearchList.fragment.coffee`の`_createTemplate`を変更します。\r\n\r\n*view/SearchList.fragment.coffee:_createTemplate()*\r\n```coffeescript\r\n  _createTemplate: (oController) ->\r\n    new sap.m.ColumnListItem\r\n      type: \"Navigation\"\r\n      press: [oController.onItemPress, oController]\r\n      cells: [\r\n        new sap.m.Text\r\n          text: \"{Supplier/CompanyName}\"\r\n        new sap.m.Text\r\n          text: \"{Category/CategoryName}\"\r\n        new sap.m.ObjectIdentifier\r\n          title: \"{ProductName}\"\r\n          text: \"{QuantityPerUnit}\"\r\n        new sap.m.ObjectNumber\r\n          number: \"{UnitsOnOrder}\"\r\n        new sap.m.ObjectNumber\r\n          number: \"{UnitsInStock}\"\r\n        new sap.m.ObjectNumber\r\n          number: \"{UnitPrice}\"\r\n          unit: \"USD\"\r\n      ]\r\n```\r\nテンプレート定義は`sap.m.ColumnListItem`を作成して返します。  \r\n`cells`の中に各セルとなるUIコントロールが定義されている構造が読み取れると思います。各UIコントロールの中の`{`から`}`の中に含まれている文字列が**path**と呼ばれるもので、ODataのEntitiesからの相対的な位置を指定して各UIコントロールに対してピンポイントでデータバインドを定義しています。  \r\nプロパティからさらに子のプロパティを参照する場合の区切り文字は`/`を指定します。\r\n\r\n結果は以下の通りです。\r\n![templateもデータバインドのみ](docs/img/5.3.a-2.png)\r\n\r\n`Product`の内容は表示することができましたが、`Supplier`と`Category`の内容が表示されません。これはODataのデータ取得の際に、返却されるデータにこれらの関連するEntityのデータが含まれていないためです。\r\n\r\n返却されくるデータに関連するEntityのデータを含めるためには、`$expand`と`$select`を利用します。これらをOpenUI5で扱うためには、先ほどの取り上げた商品リストテーブルUIのデータバインドする際に、パラメータを渡すように設定します。  \r\n`view/SearchList.fragment.coffee`の`createContent`のデータバインド部分を変更します。\r\n\r\n*view/SearchList.fragment.coffee:createContent()*\r\n```coffeescript\r\n\t\r\n\t...\r\n\r\n  createContent: (oController) ->\r\n    new sap.m.Table\r\n      id: oController.getView().createId(\"productList\")\r\n      growing: true\r\n      growingThreshold: 5\r\n      growingTriggerText: \"もっと見る\"\r\n      noDataText: \"データがありません。\"\r\n      headerToolbar: @_createHeaderToolbar(oController)\r\n      columns: @_createHeaderColumns(oController)\r\n      # ここにODataをバインドしていきます。\r\n      items:\r\n        path: \"/Products\"\r\n        template: @_createTemplate(oController)\r\n        parameters:\r\n          expand: \"Category, Supplier\"\r\n          select: \"*, Category/CategoryName, Supplier/CompanyName\"\r\n\r\n    ...\r\n\r\n```\r\nデータバインドする際のプロパティに`parameters`を含める事で、ODataへデータアクセスする際にパラメータを渡すことができるようになります。\r\n\r\n結果は以下の通りです。\r\n![商品リスト](docs/img/5.3.a-3.png)\r\n\r\nこれで一通りODataのEntitiesをテーブルにデータバインドして表示することができました。\r\n\r\n**[[⬆]](#table)**\r\n\r\n## <a name=\"search\">5.3.b 商品名での検索</a>\r\n\r\nでは、次に商品名での検索機能を作っていきましょう。  \r\nODataSeviceのEntitiesに対して何らかのFilter処理を施す場合は、`$filter`を利用します。  \r\n`view/Master.controller.coffee`の`onSearch`に検索処理を実装していきます。\r\n\r\n*view/Master.controller.coffee:onSearch()*\r\n```coffeescript\r\n  \r\n  ...\r\n\r\n  onSearch: (evt) ->\r\n    # ここに検索処理を書きます。\r\n\r\n    # 画面からの入力値を受け取ってfilter定義を作成\r\n    query = @query.getValue()\r\n    filters = [new sap.ui.model.Filter(\"ProductName\", \"Contains\", query)]\r\n    \r\n    # 商品リストテーブルUIのデータバインド定義を取得してfilter設定\r\n    binding = @productList.getBinding \"items\"\r\n    binding.filter filters, sap.ui.model.FilterType.Application\r\n\r\n    ...\r\n\r\n```\r\nfilterの演算子は`sap.ui.model.FilterOperator`に定義されているものを利用します。今回はあいまい検索の想定で`Contains`を指定しています。それ以外の設定値は以下の通りです。\r\n\r\n```js\r\n{\r\n  BT: \"BT\"\r\n  Contains: \"Contains\"\r\n  EQ: \"EQ\"\r\n  EndsWith: \"EndsWith\"\r\n  GE: \"GE\"\r\n  GT: \"GT\"\r\n  LE: \"LE\"\r\n  LT: \"LT\"\r\n  NE: \"NE\"\r\n  StartsWith: \"StartsWith\"\r\n}\r\n```\r\n\r\nちなみに、filter定義の`filters`はArrayであるため、複数のfilter定義を含めることが出来ます。\r\n\r\nでは、商品名の部分に`Cha`を入力して検索してみましょう。  \r\n結果は以下の通りです。\r\n![商品名検索](docs/img/5.3.b-1.png)\r\n\r\nこのままでもいいのですが、検索時などのODataServiceへのデータアクセスの際にユーザーに対してフィードバックがありませんので、データアクセス時にローディングイメージを表示するようにしましょう。  \r\nOpenUI5ではODataServiceはODataModelとして取り扱います。ODataModelにはODataServiceへのデータアクセスに関連するライフサイクルイベントが利用できますので、今回はライフサイクルイベントを利用してローディングイメージを表示させてみましょう。  \r\n`Componemt.coffee`の`init`を変更しましょう。  \r\n\r\n*Componemt.coffee:init()*\r\n```coffeescript\r\n\r\n  init: ->\r\n\r\n    ...\r\n\r\n    # ここにOdataServiceのエンドポイントを設定します\r\n    # /V3/Northwind/Northwind.svc/\r\n    endpoint = sap.ui.model.odata.ODataModel \"/V3/Northwind/Northwind.svc/\", true\r\n    @setModel endpoint\r\n\r\n    # バックエンドにデータ問い合わせの際のローディングイメージを表示します。\r\n    busy = new sap.m.BusyDialog\r\n      title: \"Loading data\"\r\n    endpoint.attachRequestSent ->　busy.open()\r\n    endpoint.attachRequestCompleted ->　busy.close()\r\n\r\n    ...\r\n\r\n```\r\n`new sap.m.BusyDialog`でローディングイメージを表示するダイアログを生成します。上で作成したODataModeオブジェクトに対して`attachRequestSent`と`attachRequestCompleted`にてライフサイクルイベントが発生したタイミングで処理を割り込ませる事が可能です。  \r\n`attachRequestSent`はODataServiceに対するデータアクセスが開始されたタイミングで発生します。\r\n`attachRequestCompleted`はデータアクセスが完了したタイミングで発生します。成功、失敗は問いません。\r\n\r\n先ほどと同じ商品名の部分に`Cha`を入力して検索してみましょう。  \r\n結果は以下の通りです。\r\n![商品名検索ローディングあり](docs/img/5.3.b-2.png)\r\n\r\n実際には、ローディング開始のタイミングが少し遅いと思いますので、ボタンを押したタイミングでローディングを表示させるなど、工夫が必要です。\r\n\r\nここまでで商品検索処理を実現することができました。\r\n\r\n**[[⬆]](#table)**\r\n\r\n## <a name=\"sortandfilter\">5.3.c 商品リストのソート、フィルタ</a>\r\n\r\nではまずソート機能から作っていきましょう。  \r\nテーブルの右上の![セッティングボタン](docs/img/5.3.c-1.png)こちらのアイコンを押すと、テーブルの表示設定を変更できるダイアログ（以下、ViewSettingsダイアログ）が表示されます。まだソート項目には固定値が表示されているため、実際のテーブルの項目を表示させるようにしましょう。  \r\n`ViewSettings.fragment.coffee`の`createContent`を変更しましょう。\r\n\r\n*ViewSettings.fragment.coffee:createContent()*\r\n```coffeescript\r\n\r\n  ...\r\n\r\n  createContent: (oController) ->\r\n    new sap.m.ViewSettingsDialog\r\n      title: \"ソート&フィルタ\"\r\n      confirm: [oController.onChangeViewSettings, oController]\r\n      # ここにソート条件を書きます\r\n      sortItems: [\r\n        new sap.m.ViewSettingsItem\r\n          text: \"ProductName\"\r\n          key: \"ProductName\"\r\n          selected: true\r\n        new sap.m.ViewSettingsItem\r\n          text: \"Category\"\r\n          key: \"Category/CategoryName\"\r\n        new sap.m.ViewSettingsItem\r\n          text: \"Supplier\"\r\n          key: \"Supplier/CompanyName\"\r\n        new sap.m.ViewSettingsItem\r\n          text: \"Order\"\r\n          key: \"UnitsOnOrder\"\r\n        new sap.m.ViewSettingsItem\r\n          text: \"Stock\"\r\n          key: \"UnitsInStock\"\r\n        new sap.m.ViewSettingsItem\r\n          text: \"Price\"\r\n          key: \"UnitPrice\"\r\n      ]\r\n      filterItems: [\r\n\r\n      ...\r\n\r\n```\r\n`sap.m.ViewSettingsDialog`の`sortItems`プロパティのArrayに`sap.m.ViewSettingsItem`を追加していきます。  \r\n`sap.m.ViewSettingsItem`が実際のViewSettingsダイアログにソート項目として表示されるものです。`text`には表示ラベル、`key`はソートを選択した場合のキー項目に該当します。基本的に何を設定してもいいのですが、後の処理での使い易さを考慮して、通常はODataのpathを設定します。\r\n\r\n結果は以下の通りです。\r\n![ソートダイアログ](docs/img/5.3.c-2.png)\r\n\r\n次に実際のソート処理を作成していきます。ソート処理は前め商品名検索と基本的には同じです。  \r\n`Master.conrtoller.coffee`の`onChangeViewSettings`を変更しましょう。\r\n\r\n*Master.conrtoller.coffee:onChangeViewSettings()*\r\n```coffeescript\r\n\r\n  ...\r\n\r\n  onChangeViewSettings: (evt) ->\r\n    # ここにソートとフィルタ処理を書きます。\r\n    params = evt.getParameters()\r\n    binding = @productList.getBinding \"items\"\r\n\r\n    #ソート設定\r\n    sortSettings = []\r\n    if params.sortItem\r\n      path = params.sortItem.getKey()\r\n      descending = params.sortDescending\r\n      sortSettings.push new sap.ui.model.Sorter(path, descending)\r\n\r\n    binding.sort sortSettings\r\n\r\n    ...\r\n\r\n```\r\n商品リストテーブルのデータバインド設定に対して`new sap.ui.model.Sorter`オブジェクトを設定します。\r\n\r\nでは、Stockの降順でソートしてみます。  \r\n結果は以下の通りです。\r\n![ソート機能](docs/img/5.3.c-3.png)\r\n\r\nStockの大きい順に表示することができました。早速次はフィルタ機能を作っていきます。  \r\nソートと同様にViewSettingsダイアログの設定から行います。  \r\n\r\n`ViewSettings.fragment.coffee`の`createContent`を変更しましょう。\r\n\r\n*ViewSettings.fragment.coffee:createContent()*\r\n```coffeescript\r\n\r\n  ...\r\n\r\n  createContent: (oController) ->\r\n    new sap.m.ViewSettingsDialog\r\n      title: \"ソート&フィルタ\"\r\n      confirm: [oController.onChangeViewSettings, oController]\r\n      # ここにソート条件を書きます\r\n      sortItems: [\r\n        \r\n        ...\r\n\r\n      ]\r\n      # ここにフィルタ条件を書きます\r\n      filterItems: [\r\n        new sap.m.ViewSettingsFilterItem\r\n          text: \"Order\"\r\n          key: \"UnitsOnOrder\"\r\n          multiSelect: false\r\n          items: [\r\n            new sap.m.ViewSettingsItem\r\n              text: \"less than 10\"\r\n              key: \"UnitsOnOrder___LE___10___X\"\r\n            new sap.m.ViewSettingsItem\r\n              text: \"between 10 and 20\"\r\n              key: \"UnitsOnOrder___BT___10___20\"\r\n            new sap.m.ViewSettingsItem\r\n              text: \"greater than 20\"\r\n              key: \"UnitsOnOrder___GT___20___X\"\r\n          ]\r\n        new sap.m.ViewSettingsFilterItem\r\n          text: \"Stock\"\r\n          key: \"UnitsInStock\"\r\n          multiSelect: false\r\n          items: [\r\n            new sap.m.ViewSettingsItem\r\n              text: \"less than 10\"\r\n              key: \"UnitsInStock___LE___10___X\"\r\n            new sap.m.ViewSettingsItem\r\n              text: \"between 10 and 20\"\r\n              key: \"UnitsInStock___BT___10___20\"\r\n            new sap.m.ViewSettingsItem\r\n              text: \"greater than 20\"\r\n              key: \"UnitsInStock___GT___20___X\"\r\n          ]\r\n      ]\r\n\r\n      ...\r\n\r\n```\r\n`sap.m.ViewSettingsDialog`の`filterItems`プロパティのArrayに`ssap.m.ViewSettingsFilterItem`を追加していきます。  \r\n`text`と`key`はソート時と同じです、フィルタ条件がいくつかあるため`items`プロパティに`sap.m.ViewSettingsItem`を複数設定します。  \r\n`sap.m.ViewSettingsItem`の`key`の値は`UnitsOnOrder___LE___10___X`のようになっていますが、後のフィルタ処理にて`___`を区切って分割して値を利用しています。  \r\nちょっと強引な実装ですね。\r\n\r\n結果は以下の通りです。\r\n![ソートダイアログフィルタ](docs/img/5.3.c-4.png)\r\n\r\n`Master.conrtoller.coffee`の`onChangeViewSettings`を変更しましょう。\r\n\r\n*Master.conrtoller.coffee:onChangeViewSettings()*\r\n```coffeescript\r\n\r\n  ...\r\n\r\n  onChangeViewSettings: (evt) ->\r\n\r\n    # ここにソートとフィルタ処理を書きます。\r\n    params = evt.getParameters()\r\n    binding = @productList.getBinding \"items\"\r\n\r\n    #ソート設定\r\n    sortSettings = []\r\n    if params.sortItem\r\n      path = params.sortItem.getKey()\r\n      descending = params.sortDescending\r\n      sortSettings.push new sap.ui.model.Sorter(path, descending)\r\n    binding.sort sortSettings\r\n\r\n    #フィルタ設定\r\n    filterSettings = []\r\n    jQuery.each params.filterItems, (i, item) ->\r\n      settingArray = item.getKey().split \"___\"\r\n      filter = new sap.ui.model.Filter settingArray[0], settingArray[1], settingArray[2], settingArray[3]\r\n      filterSettings.push filter\r\n    binding.filter filterSettings\r\n\r\n    ...\r\n\r\n```\r\nいままで行ってきた商品名検索とソート処理とほとんど同じだとおもいます。\r\n\r\nでは、orderが10〜20の範囲でフィルタしてみます。    \r\n結果は以下の通りです。\r\n![フィルタ機能](docs/img/5.3.c-5.png)\r\n\r\nここまででソートとフィルタ機能を作る事ができました。\r\n\r\n**[[⬆]](#table)**\r\n\r\n<a name=\"product_impl\">5.4 商品詳細の実装</a>\r\n========\r\n次からは商品情報詳細画面の実装です。  \r\nこの画面では商品情報、カテゴリー情報、メーカー情報を参照することができます。  \r\n画面上部に商品情報表示エリア、画面下部がカテゴリー情報とメーカー情報のタブとなっています。\r\n\r\n## <a name=\"product\">5.4.a 商品情報の参照</a>\r\nまず、商品検索画面から`ProductID`を受け取って商品情報画面に表示します。`ProductID`は商品情報画面を表示する際のURLハッシュ末尾の数値が該当します。  \r\n例）  \r\n`http://localhost:9000/#/product/3`の`3`\r\n\r\nOpenUI5ではroutingする際のパラメータとして渡されます。商品情報詳細画面へのroutingの処理は`Master.controlle.coffee`の`onItemPress`に書かれています。\r\n\r\n*view/Master.controller.coffee:onItemPress()*\r\n````coffeescript\r\n\r\n  ...\r\n\r\n  onItemPress: (evt) ->\r\n    context = evt.getSource().getBindingContext()\r\n    @router.navTo \"Detail\",\r\n      id: context.getObject().ProductID\r\n\r\n  ....\r\n\r\n````\r\n`@router.navTo`の第1引数に次の画面のrouter内でのエイリアス名、第2引数にURLハッシュにとなるパラメータ`ProductID`を渡しています。\r\n\r\nでは、この`ProductID`を商品情報詳細画面にて受け取って処理しましょう。`Detail.controlle.coffee`の`onRouteMatched`を変更します。  \r\n（とは言っても、URLハッシュからProductIDを取得する部分は既に実装済みです。）\r\n\r\n*view/Detail.controller.coffee:onItemPress()*\r\n````coffeescript\r\n\r\n  ...\r\n\r\n  onRouteMatched: (evt) ->\r\n    unless evt.getParameter(\"name\") is \"Detail\"\r\n      return\r\n\r\n    # URLパラメータから商品IDを取得します。\r\n    @productId = evt.getParameters().arguments.id\r\n\r\n    # ここでEntityにアクセスします。\r\n    @getView().bindElement \"/Products(#{@productId})\"\r\n\r\n    ...\r\n\r\n````\r\nviewの`bindElement`にそのviewで参照したいODataModelのPathを設定します。今回のPriductsの場合、ProductIDがKeyとなるので実際は以下のようなPathを設定しています。  \r\n例）  \r\n`/Products(2)`  \r\nProductIDが2の場合\r\n\r\n次に、商品情報表示エリアにODataのプロパティをデータバインドしていきます。`ProductInfo.fragment.coffee`の`createContent`を変更します。  \r\n`title`、`number`、`attributes`の部分にはデータバインドしたいプロパティをそのまま設定します。  \r\n`statuses`はデータバインドをする際に値を変更formatterを使用した、少し高度なデータバインドを行います。\r\n\r\n*view/ProductInfo.fragment.coffee:createContent()*\r\n```coffeescript\r\n\r\n  ...\r\n\r\n  createContent: (oController) ->\r\n    new sap.m.ObjectHeader\r\n      title: \"{ProductName}\"\r\n      number: \"{UnitPrice}\"\r\n      numberUnit: \"USD\"\r\n      statuses: [\r\n        new sap.m.ObjectStatus\r\n          text: \r\n            parts: [\r\n              {path: \"UnitsInStock\"}\r\n              {path: \"UnitsOnOrder\"}\r\n            ]\r\n            formatter: (stock, order) ->\r\n              \"#{order} / #{stock} (Order/Stock)\"\r\n          state:\r\n            path: \"UnitsInStock\"\r\n            formatter: (stock) ->\r\n              return if stock <= 10 then \"Error\" else \"Success\"\r\n      ]\r\n      attributes: [\r\n        new sap.m.ObjectAttribute\r\n          text: \"{QuantityPerUnit}\"\r\n\r\n      ]\r\n\r\n  ...\r\n\r\n```\r\nformatterを使ったデータバインドについて、少し解説します。  \r\nまず、formatterを使ったデータバインドの基本形は、データバインドしたいプロパティに対して`path`と`formatter`の2つを設定します。`path`にはデータバインドしたいOData側のプロパティ、`formatter`は実際にデータがバインドされた際に実行されるcallbackで、バインドされた値が引数で与えられます。\r\n\r\nこの基本形を用いたものが`state`の部分です、`state`ではstock=10を閾値に返すステータスを変化させています。\r\n\r\n次に、複数のODataのプロパティを利用して1つの出力とする例です。複数の複数のODataのプロパティを利用する場合は、`path`の部分に利用したいプロパティを`parts`の中に含めて定義します。バインドされた値は`formatter`のcallbackの引数として与えられます。\r\n\r\n`text`の部分は複数のプロパティを利用したもので、在庫数と受注数の2つを1つのフィールドに表示しています。\r\n\r\n結果は以下の通りです。\r\n![商品情報](docs/img/5.4.a-1.png)\r\n\r\n商品検索画面に戻って、別の商品を選択して商品詳細画面に遷移すると商品情報が追従して表示されるはずです。\r\n\r\n**[[⬆]](#table)**\r\n\r\n## <a name=\"category\">5.4.b カテゴリー情報とメーカー情報の参照</a>\r\n\r\nここから先は難しいパートはありません。ここまで理解した知識で作ることができます。\r\n残るはタブの中にカテゴリー情報とメーカー情報を表示させたら完成です。\r\n\r\n早速`Detail.controlle.coffee`の`onRouteMatched`を変更してタブに表示するデータをバインドしていきましょう。\r\n\r\n*view/Detail.controller.coffee:onItemPress()*\r\n```coffeescript\r\n\r\n  ...\r\n\r\n  onRouteMatched: (evt) ->\r\n\r\n    ...\r\n\r\n    # tabもデータをバインドします\r\n    @tabs.getItems().forEach (item) ->\r\n      item.bindElement item.getKey()\r\n\r\n  ...\r\n\r\n\r\n```\r\nそれぞれのタブは`@tabs.getItems()`にて取得できるため、forEachでそれぞれのタブに対して`bindElement`を使ってバインドしたいODataのPathを設定します。  \r\nそれぞれのタブのkeyにはEntityTypeの`NavigationProperty`（SupplierとCategory）が設定されています。既に商品情報画面のViewにはEntity`/Products(2)`がバインドされているため、Viewの子コントロールであるタブはそれ以下のPathを設定します。実際のデータバインドしているPathは次のようになっています。  \r\n例）KeyがCategoryの場合  \r\n`/Products(2)/Category`\r\n\r\n次は、それぞれのタブのUIコンポーネントにODataのプロパティをバインドしていきましょう。`CategoryInfoForm.fragment.coffee`と`SupplierAddressForm.fragment.coffee`を変更します。\r\n\r\n*view/CategoryInfoForm.fragment.coffee:createContent()*\r\n```coffeescript\r\n\r\n  ...\r\n\r\n  createContent: (oController) ->\r\n    form = new sap.ui.layout.form.SimpleForm\r\n      minWidth: 1024,\r\n      editable: false\r\n      content: [\r\n        new sap.ui.core.Title\r\n          text: \"Category\"\r\n        new sap.m.Label\r\n          text: \"CategoryID\"\r\n        new sap.m.Text\r\n          text: \"{CategoryID}\"\r\n        new sap.m.Label\r\n          text: \"CategoryName\"\r\n        new sap.m.Text\r\n          text: \"{CategoryName}\"\r\n        new sap.m.Label\r\n          text: \"Description\"\r\n        new sap.m.Text\r\n          text: \"{Description}\"\r\n      ]\r\n\r\n    ...\r\n\r\n```\r\n\r\n*view/SupplierAddressForm.fragment.coffee:createContent()*\r\n```coffeescript\r\n\r\n  ...\r\n\r\n  createContent: (oController) ->\r\n    form = new sap.ui.layout.form.SimpleForm\r\n      minWidth: 1024,\r\n      editable: false\r\n      content: [\r\n        new sap.ui.core.Title\r\n          text: \"Company\"\r\n        new sap.m.Label\r\n          text: \"SupplierID\"\r\n        new sap.m.Text\r\n          text: \"{SupplierID}\"\r\n        new sap.m.Label\r\n          text: \"CompanyName\"\r\n        new sap.m.Text\r\n          text: \"{CompanyName}\"\r\n        new sap.ui.core.Title\r\n          text: \"Contact\"\r\n        new sap.m.Label\r\n          text: \"ContactName\"\r\n        new sap.m.Text\r\n          text: \"{ContactName}\"\r\n        new sap.m.Label\r\n          text: \"ContactTitle\"\r\n        new sap.m.Text\r\n          text: \"{ContactTitle}\"\r\n        new sap.m.Label\r\n          text: \"PostalCode\"\r\n        new sap.m.Text\r\n          text: \"{PostalCode}\"\r\n        new sap.m.Label\r\n          text: \"Addreess\"\r\n        new sap.m.Text\r\n          text: \r\n            parts: [\r\n              {path: \"Country\"}\r\n              {path: \"Region\"}\r\n              {path: \"City\"}\r\n              {path: \"Address\"}\r\n            ]\r\n            formatter: (country = \"\", region = \"\", city = \"\", address = \"\") ->\r\n              \"#{country} #{region} #{city} #{address}\"\r\n        new sap.m.Label\r\n          text: \"Phone\"\r\n        new sap.m.Text\r\n          text: \"{Phone}\"\r\n        new sap.m.Label\r\n          text: \"HomePage\"\r\n        new sap.m.Text\r\n          text: \"{HomePage}\"\r\n      ]\r\n\r\n      ...\r\n\r\n```\r\n結果は以下の通りです。  \r\nカテゴリー情報\r\n![カテゴリー情報](docs/img/5.4.b-1.png)\r\nメーカー情報\r\n![メーカー情報](docs/img/5.4.b-2.png)\r\n\r\nこれで商品検索画面と商品詳細画面が完成しました。\r\n\r\n**[[⬆]](#table)**\r\n\r\n<a name=\"summary\">6 まとめ</a>\r\n========\r\n\r\n以上でチュートリアルは終了です。  \r\nODataをOpenUI5とどのように統合すれば良いかについては、理解が深まったかと思います。\r\n\r\nまた、ODataの柔軟なデータアクセス能力とOpenUI5のUIコンポーネントへのデータバインドを組み合わせることで、フロントエンドからバックエンドまで優れた隠蔽化と標準化がされ、これからの企業向けWebアプリケーション開発における「OpenUI5＋ODataService」という新しい可能性（選択肢）を感じていただけたのではないかと思います。\r\n\r\nまだ、ODataServiceをどのように構築するかという課題はありますが、ODataServiceとUIフレームワークを組み合わせる事によって得られる、高い隠蔽化と標準化によって非常に効率的かつメンテナンス性良くWebアプリケーションが構築できる可能性があることが分かります。\r\n\r\n**[[⬆]](#table)**","google":"UA-53035841-1","note":"Don't delete this file! It's used internally to help with page regeneration."}